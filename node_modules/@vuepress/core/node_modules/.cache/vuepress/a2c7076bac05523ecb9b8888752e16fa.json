{"remainingRequest":"/Users/onlyone/open-github/technology-talk/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/onlyone/open-github/technology-talk/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/onlyone/open-github/technology-talk/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/onlyone/open-github/technology-talk/docs/.vuepress/components/LockArticle.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/onlyone/open-github/technology-talk/docs/.vuepress/components/LockArticle.vue","mtime":1677049100458},{"path":"/Users/onlyone/open-github/technology-talk/node_modules/cache-loader/dist/cjs.js","mtime":1676962415098},{"path":"/Users/onlyone/open-github/technology-talk/node_modules/babel-loader/lib/index.js","mtime":1676962415297},{"path":"/Users/onlyone/open-github/technology-talk/node_modules/cache-loader/dist/cjs.js","mtime":1676962415098},{"path":"/Users/onlyone/open-github/technology-talk/node_modules/vue-loader/lib/index.js","mtime":1676962415466}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdMb2NrQXJ0aWNsZScsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7fTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHsKICAgIC8vIOWumuaXtuS7u+WKoQogICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICBpZiAodGhpcy5pc0xvY2soKSkgewogICAgICAgIGxldCAkYXJ0aWNsZSA9IHRoaXMuYXJ0aWNsZU9iaigpOwogICAgICAgIHRoaXMuX2RldGVjdCgkYXJ0aWNsZSwgdGhpcyk7CiAgICAgIH0KICAgIH0sIDE1MDApOwoKICAgIC8vIOWIpOaWreaYr+WQpumUgeWumuaWh+eroAogICAgLy8gaWYgKHRoaXMuaXNMb2NrKCkpIHsKICAgIC8vICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgIC8vICAgICAgICAgbGV0ICRhcnRpY2xlID0gdGhpcy5hcnRpY2xlT2JqKCk7CiAgICAvLyAgICAgICAgIHRoaXMuX2RldGVjdCgkYXJ0aWNsZSwgdGhpcyk7CiAgICAvLwogICAgLy8gICAgICAgICAvLyDlrprml7bku7vliqEKICAgIC8vICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgLy8gICAgICAgICAgICAgdGhpcy5fZGV0ZWN0KCRhcnRpY2xlLCB0aGlzKTsKICAgIC8vICAgICAgICAgfSwgNTAwMCk7CiAgICAvLwogICAgLy8gICAgIH0sIDIwMDApOwogICAgLy8gfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIGlzTG9jaygpIHsKICAgICAgcmV0dXJuICJuZWVkIiA9PT0gdGhpcy4kcGFnZS5mcm9udG1hdHRlci5sb2NrOwogICAgfSwKICAgIGFydGljbGVPYmo6IGZ1bmN0aW9uICgpIHsKICAgICAgbGV0ICRhcnRpY2xlID0gJCgnLnRoZW1lLWRlZmF1bHQtY29udGVudCcpOwogICAgICBpZiAoJGFydGljbGUubGVuZ3RoIDw9IDApIHJldHVybiBudWxsOwoKICAgICAgLy8g5paH56ug55qE5a6e6ZmF6auY5bqmCiAgICAgIGxldCBoZWlnaHQgPSAkYXJ0aWNsZVswXS5jbGllbnRIZWlnaHQ7CiAgICAgIHJldHVybiB7CiAgICAgICAgYXJ0aWNsZTogJGFydGljbGUsCiAgICAgICAgaGVpZ2h0OiBoZWlnaHQKICAgICAgfTsKICAgIH0sCiAgICBfZGV0ZWN0OiBmdW5jdGlvbiAoYXJ0aWNsZU9iaiwgdCkgewogICAgICBpZiAobnVsbCA9PSBhcnRpY2xlT2JqKSByZXR1cm47CiAgICAgIGxldCByZXMgPSB0aGlzLmdldENvb2tpZSgiX3VubG9jayIpOwogICAgICBpZiAoJ3N1Y2Nlc3MnID09PSByZXMpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdC5nZXRUb2tlbigpLnRoZW4oZnVuY3Rpb24gKHRva2VuKSB7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgIHVybDogJ2h0dHBzOi8vYXBpLm9mZmVyY29tZS5jbi9pbnRlcmZhY2VzL0Jsb2dBcGkucGhwJywKICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgZGF0YVR5cGU6ICJ0ZXh0IiwKICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgdG9rZW46IHRva2VuCiAgICAgICAgICB9LAogICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgaWYgKGRhdGEgPT09ICdyZWZ1c2UnKSB7CiAgICAgICAgICAgICAgdC5fbG9jayhhcnRpY2xlT2JqKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0Ll91bmxvY2soYXJ0aWNsZU9iaik7CiAgICAgICAgICAgICAgdC5zZXRDb29raWUoIl91bmxvY2siLCAic3VjY2VzcyIsIDcpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHQuX3VubG9jayhhcnRpY2xlT2JqKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgX2xvY2s6IGZ1bmN0aW9uIChhcnRpY2xlT2JqKSB7CiAgICAgIGxldCAkYXJ0aWNsZSA9IGFydGljbGVPYmouYXJ0aWNsZTsKICAgICAgbGV0IGhlaWdodCA9IGFydGljbGVPYmouaGVpZ2h0OwogICAgICBpZiAoJGFydGljbGUubGVuZ3RoIDw9IDApIHJldHVybjsKCiAgICAgIC8vIOaWh+eroOmakOiXj+WQjueahOmrmOW6pgogICAgICBsZXQgaGFsZkhlaWdodCA9IGhlaWdodCAqIDAuMzsKCiAgICAgIC8vIOevh+W5heefreS4gOeCueeahOaWh+eroOWwseS4jemcgOimgeino+mUgeS6hgogICAgICBpZiAodGhpcy5vcygpLmlzUGMgJiYgaGFsZkhlaWdodCA+IDgwMCkgewogICAgICAgIC8vIOiOt+WPluWPo+S7pAogICAgICAgIHRoaXMuZ2V0VG9rZW4oKS50aGVuKGZ1bmN0aW9uICh0b2tlbikgewogICAgICAgICAgJCgnI2Z1c3RhY2stdG9rZW4nKS50ZXh0KHRva2VuKTsKCiAgICAgICAgICAvLyDliKTmlq3mmK/lkKblt7LliqDplIEKICAgICAgICAgIGlmICgkYXJ0aWNsZS5oYXNDbGFzcygibG9jayIpKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyDorr7nva7mlofnq6Dlj6/mmL7npLrpq5jluqYKICAgICAgICAgICRhcnRpY2xlLmNzcyh7CiAgICAgICAgICAgICJoZWlnaHQiOiBoYWxmSGVpZ2h0ICsgJ3B4JwogICAgICAgICAgfSk7CiAgICAgICAgICAkYXJ0aWNsZS5hZGRDbGFzcygnbG9jaycpOwoKICAgICAgICAgIC8vIOa3u+WKoOW8leWvvOino+mUgeagh+etvgogICAgICAgICAgJGFydGljbGUucmVtb3ZlKCIjcmVhZC1tb3JlLXdyYXAiKTsKICAgICAgICAgIGxldCBjbG9uZSA9ICQoJy5yZWFkLW1vcmUtd3JhcCcpLmNsb25lKCk7CiAgICAgICAgICBjbG9uZS5hdHRyKCdpZCcsICdyZWFkLW1vcmUtd3JhcCcpOwogICAgICAgICAgY2xvbmUuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7CiAgICAgICAgICBjbG9uZS5maW5kKCIjcmVhZC1tb3JlLWJ0biIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY2xvbmUuZmluZCgiI2J0dy1tb2RhbC13cmFwIikuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGNsb25lLmZpbmQoIiNidHctbW9kYWwtY2xvc2UtYnRuIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjbG9uZS5maW5kKCIjYnR3LW1vZGFsLXdyYXAiKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgICAgfSk7CiAgICAgICAgICAkYXJ0aWNsZS5hcHBlbmQoY2xvbmUpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgX3VubG9jazogZnVuY3Rpb24gKGFydGljbGVPYmopIHsKICAgICAgbGV0ICRhcnRpY2xlID0gYXJ0aWNsZU9iai5hcnRpY2xlOwoKICAgICAgLy8g5Yik5pat5piv5ZCm5bey5Yqg6ZSBCiAgICAgIGlmICghJGFydGljbGUuaGFzQ2xhc3MoImxvY2siKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICAkYXJ0aWNsZS5jc3MoJ2hlaWdodCcsICdpbml0aWFsJyk7CiAgICAgICRhcnRpY2xlLnJlbW92ZUNsYXNzKCdsb2NrJyk7CiAgICAgICQoJyNyZWFkLW1vcmUtd3JhcCcpLnJlbW92ZSgpOwogICAgfSwKICAgIGdldFRva2VuOiBhc3luYyBmdW5jdGlvbiAoKSB7CiAgICAgIC8vIOa1j+iniOWZqCBDb29raWUgdHJ1ZSDkuI3pmZDliLYKICAgICAgaWYgKG5hdmlnYXRvci5jb29raWVFbmFibGVkKSB7CiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRDb29raWUoJ0JBRUlEJyk7CiAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0RmluZ2VycHJpbnRJZCgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKHZhbHVlLmxlbmd0aCAtIDYpLnRvVXBwZXJDYXNlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0RmluZ2VycHJpbnRJZCgpOwogICAgICB9CiAgICAgIC8vIHJldHVybiBhd2FpdCB0aGlzLmdldEZpbmdlcnByaW50SWQoKTsKICAgIH0sCgogICAgZ2V0RmluZ2VycHJpbnRJZDogZnVuY3Rpb24gKCkgewogICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmluZ2VycHJpbnRqcy9maW5nZXJwcmludGpzCiAgICAgIC8qIG5ldyBGaW5nZXJwcmludDIoKS5nZXQoZnVuY3Rpb24ocmVzdWx0LCBjb21wb25lbnRzKXsKICAgICAgICAgICBsZXQgdmFsdWUgPSByZXN1bHQudG9VcHBlckNhc2UoKTsKICAgICAgICAgICBsZXQgdG9rZW4gPSB2YWx1ZS5zdWJzdHJpbmcodmFsdWUubGVuZ3RoIC0gNikudG9VcHBlckNhc2UoKTsKICAgICAgICAgICAvLyDorr7nva50b2tlbgogICAgICAgICAgICQoJyNmdXN0YWNrLXRva2VuJykudGV4dCh0b2tlbik7CiAgICAgICB9KTsKICAgICAgIHJldHVybiAkKCcjZnVzdGFjay10b2tlbicpLnRleHQoKTsqLwogICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7CiAgICAgICAgbmV3IEZpbmdlcnByaW50MigpLmdldChmdW5jdGlvbiAocmVzdWx0LCBjb21wb25lbnRzKSB7CiAgICAgICAgICBsZXQgdmFsdWUgPSByZXN1bHQudG9VcHBlckNhc2UoKTsKICAgICAgICAgIGxldCB0b2tlbiA9IHZhbHVlLnN1YnN0cmluZyh2YWx1ZS5sZW5ndGggLSA2KS50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgcmVzb2x2ZSh0b2tlbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFVVSUQ6IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICd4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHsKICAgICAgICBsZXQgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsCiAgICAgICAgICB2ID0gYyA9PT0gJ3gnID8gciA6IHIgJiAweDMgfCAweDg7CiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRDb29raWU6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgIGxldCB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICAgIGxldCBwYXJ0cyA9IHZhbHVlLnNwbGl0KCI7ICIgKyBuYW1lICsgIj0iKTsKICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikgcmV0dXJuIHBhcnRzLnBvcCgpLnNwbGl0KCI7Iikuc2hpZnQoKTsKICAgIH0sCiAgICBzZXRDb29raWU6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgaG91cnMpIHsKICAgICAgbGV0IGV4cCA9IG5ldyBEYXRlKCk7CiAgICAgIGV4cC5zZXRUaW1lKGV4cC5nZXRUaW1lKCkgKyBob3VycyAqIDYwICogNjAgKiAxMDAwKTsKICAgICAgLy8gO3BhdGg9LyBjb29raWXlhajnq5nmnInmlYgKICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICI9IiArIGVzY2FwZSh2YWx1ZSkgKyAiO3BhdGg9LztleHBpcmVzPSIgKyBleHAudG9HTVRTdHJpbmcoKTsKICAgIH0sCiAgICBvczogZnVuY3Rpb24gKCkgewogICAgICBsZXQgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAgIGlzV2luZG93c1Bob25lID0gLyg/OldpbmRvd3MgUGhvbmUpLy50ZXN0KHVhKSwKICAgICAgICBpc1N5bWJpYW4gPSAvKD86U3ltYmlhbk9TKS8udGVzdCh1YSkgfHwgaXNXaW5kb3dzUGhvbmUsCiAgICAgICAgaXNBbmRyb2lkID0gLyg/OkFuZHJvaWQpLy50ZXN0KHVhKSwKICAgICAgICBpc0ZpcmVGb3ggPSAvKD86RmlyZWZveCkvLnRlc3QodWEpLAogICAgICAgIGlzQ2hyb21lID0gLyg/OkNocm9tZXxDcmlPUykvLnRlc3QodWEpLAogICAgICAgIGlzVGFibGV0ID0gLyg/OmlQYWR8UGxheUJvb2spLy50ZXN0KHVhKSB8fCBpc0FuZHJvaWQgJiYgIS8oPzpNb2JpbGUpLy50ZXN0KHVhKSB8fCBpc0ZpcmVGb3ggJiYgLyg/OlRhYmxldCkvLnRlc3QodWEpLAogICAgICAgIGlzUGhvbmUgPSAvKD86aVBob25lKS8udGVzdCh1YSkgJiYgIWlzVGFibGV0LAogICAgICAgIGlzUGMgPSAhaXNQaG9uZSAmJiAhaXNBbmRyb2lkICYmICFpc1N5bWJpYW47CiAgICAgIHJldHVybiB7CiAgICAgICAgaXNUYWJsZXQ6IGlzVGFibGV0LAogICAgICAgIGlzUGhvbmU6IGlzUGhvbmUsCiAgICAgICAgaXNBbmRyb2lkOiBpc0FuZHJvaWQsCiAgICAgICAgaXNQYzogaXNQYwogICAgICB9OwogICAgfQogIH0KfTs="},null]}